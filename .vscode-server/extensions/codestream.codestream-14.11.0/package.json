{
	"name": "codestream",
	"displayName": "New Relic CodeStream: GitHub, GitLab, Bitbucket PRs and Code Review",
	"description": "GitHub pull requests, GitLab merge requests, and code reviews in your IDE. Eliminate context-switching. Integrates with New Relic observability, Bitbucket, Slack, MS Teams, Jira, Trello and more.",
	"version": "14.11.0",
	"author": "CodeStream",
	"publisher": "CodeStream",
	"license": "UNLICENSED",
	"homepage": "https://codestream.com",
	"bugs": {
		"url": "https://github.com/TeamCodeStream/CodeStream/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/TeamCodeStream/CodeStream"
	},
	"engines": {
		"vscode": "^1.50.0"
	},
	"main": "./dist/extension",
	"icon": "assets/images/codestream.png",
	"preview": false,
	"categories": [
		"Other"
	],
	"galleryBanner": {
		"color": "#eff1f3",
		"theme": "light"
	},
	"keywords": [
		"gitlab",
		"collaboration",
		"review",
		"github",
		"slack"
	],
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "codestream-activitybar",
					"title": "New Relic CodeStream",
					"icon": "assets/images/codestream.svg"
				}
			]
		},
		"views": {
			"codestream-activitybar": [
				{
					"id": "activitybar.codestream",
					"type": "webview",
					"name": "",
					"icon": "assets/images/codestream.svg",
					"contextualTitle": "CodeStream"
				}
			],
			"scm": [
				{
					"id": "scmTreeDataProvider",
					"name": "CodeStream"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "scmTreeDataProvider",
				"contents": "[Toggle CodeStream](command:codestream.toggle)",
				"when": "codestream:status == signedOut"
			},
			{
				"view": "scmTreeDataProvider",
				"contents": "[Request Feedback](command:codestream.newReview)",
				"when": "codestream:status == signedIn"
			},
			{
				"view": "scmTreeDataProvider",
				"contents": "Request feedback on your work-in-progress, or final code review.",
				"when": "codestream:status == signedIn"
			}
		],
		"configuration": {
			"type": "object",
			"title": "CodeStream",
			"properties": {
				"codestream.autoHideMarkers": {
					"type": "boolean",
					"default": false,
					"description": "Specifies whether to automatically hide editor marker glyphs when the CodeStream panel is showing codemarks in the current file",
					"scope": "window"
				},
				"codestream.autoSignIn": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether to automatically sign in to CodeStream",
					"scope": "window"
				},
				"codestream.disableStrictSSL": {
					"type": "boolean",
					"default": false,
					"description": "Allow self-signed certificates to be used in network requests",
					"scope": "window"
				},
				"codestream.extraCerts": {
					"type": "string",
					"default": null,
					"description": "Specify path to file containing any certificate(s) you wish CodeStream connections to trust",
					"scope": "window"
				},
				"codestream.email": {
					"type": "string",
					"default": null,
					"description": "Specifies the email address to use to connect to the CodeStream service",
					"scope": "window"
				},
				"codestream.proxySupport": {
					"type": "string",
					"default": "on",
					"enum": [
						"on",
						"off"
					],
					"description": "Specifies whether to support proxy servers",
					"scope": "window"
				},
				"codestream.serverUrl": {
					"type": "string",
					"default": "https://api.codestream.com",
					"description": "Specifies the url to use to connect to the CodeStream service",
					"scope": "window"
				},
				"codestream.showAvatars": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether to show avatars",
					"scope": "window"
				},
				"codestream.showInStatusBar": {
					"type": "string",
					"enum": [
						"left",
						"right",
						false
					],
					"enumDescriptions": [
						"Shows the CodeStream status bar item on the left",
						"Shows the CodeStream status bar item on the right",
						"No CodeStream status bar item will be shown"
					],
					"default": "left",
					"description": "Specifies whether to show CodeStream in the status bar",
					"scope": "window"
				},
				"codestream.showLineLevelBlame": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether to show git blame information at the end of lines",
					"scope": "window"
				},
				"codestream.showMarkerCodeLens": {
					"type": "boolean",
					"default": false,
					"description": "Specifies whether to show code lens above lines with associated codemarks in the editor",
					"scope": "window"
				},
				"codestream.showMarkerGlyphs": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether to show glyph indicators at the start of lines with associated codemarks in the editor",
					"scope": "window"
				},
				"codestream.showShortcutTipOnSelection": {
					"type": "boolean",
					"default": false,
					"description": "Specifies whether to show a shortcut key tip attached to the selection when you select code",
					"scope": "window"
				},
				"codestream.traceLevel": {
					"type": "string",
					"default": "verbose",
					"enum": [
						"silent",
						"errors",
						"verbose",
						"debug"
					],
					"description": "Specifies how much (if any) output will be sent to the CodeStream output channel",
					"scope": "window"
				},
				"codestream.goldenSignalsInEditor": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether to show CodeStream golden signals in the editor",
					"scope": "window"
				},
				"codestream.goldenSignalsInEditorFormat": {
					"type": "string",
					"default": "avg duration: ${averageDuration} | throughput: ${throughput} | error rate: ${errorsPerMinute} - since ${since}",
					"description": "Specifies how to format the CodeStream golden signals in the editor",
					"scope": "window"
				},
				"codestream.promptToEnableCodeLensInDiffs": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether to prompt to enable Code Lens in diffs in order to show golden signals",
					"scope": "window"
				}
			}
		},
		"commands": [
			{
				"command": "codestream.showReviewDiff",
				"title": "Show Review Diff",
				"category": "CodeStream"
			},
			{
				"command": "codestream.showNextChangedFile",
				"title": "Show Next Changed File",
				"category": "CodeStream"
			},
			{
				"command": "codestream.showPreviousChangedFile",
				"title": "Show Previous Changed File",
				"category": "CodeStream"
			},
			{
				"command": "codestream.closeReviewDiff",
				"title": "Close Review Diff",
				"category": "CodeStream"
			},
			{
				"command": "codestream.goOffline",
				"title": "Go Offline",
				"category": "CodeStream"
			},
			{
				"command": "codestream.signIn",
				"title": "Sign In...",
				"category": "CodeStream"
			},
			{
				"command": "codestream.signOut",
				"title": "Sign Out",
				"category": "CodeStream"
			},
			{
				"command": "codestream.toggle",
				"title": "Toggle CodeStream",
				"category": "CodeStream"
			},
			{
				"command": "codestream.startWork",
				"title": "Start Work",
				"category": "CodeStream"
			},
			{
				"command": "codestream.newComment",
				"title": "Add Comment",
				"category": "CodeStream"
			},
			{
				"command": "codestream.newIssue",
				"title": "Create Issue",
				"category": "CodeStream"
			},
			{
				"command": "codestream.newReview",
				"title": "Request Feedback",
				"category": "CodeStream"
			},
			{
				"command": "codestream.newPermalink",
				"title": "Get Permalink",
				"category": "CodeStream"
			},
			{
				"command": "codestream.copyPermalink",
				"title": "Copy Permalink to Clipboard",
				"category": "CodeStream"
			},
			{
				"command": "codestream.newPullRequest",
				"title": "New Pull Request",
				"category": "CodeStream",
				"icon": {
					"light": "assets/images/light/pull-request.svg",
					"dark": "assets/images/dark/pull-request.svg"
				}
			},
			{
				"command": "codestream.scmNewReview",
				"title": "Request Feedback",
				"icon": {
					"light": "assets/images/light/review.svg",
					"dark": "assets/images/dark/review.svg"
				}
			},
			{
				"command": "codestream.scmNewComment",
				"title": "New Comment",
				"icon": {
					"light": "assets/images/light/comment.svg",
					"dark": "assets/images/dark/comment.svg"
				}
			},
			{
				"command": "codestream.scmNewIssue",
				"title": "New Issue",
				"icon": {
					"light": "assets/images/light/issue.svg",
					"dark": "assets/images/dark/issue.svg"
				}
			},
			{
				"command": "codestream.scmNewPullRequest",
				"title": "New Pull Request",
				"icon": {
					"light": "assets/images/light/pull-request.svg",
					"dark": "assets/images/dark/pull-request.svg"
				}
			},
			{
				"command": "codestream.viewMethodLevelTelemetry",
				"title": "View Method Level Telemetry"
			}
		],
		"keybindings": [
			{
				"command": "codestream.toggle",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ /",
				"mac": "ctrl+/ /",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.toggle",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ ctrl+shift+/",
				"mac": "ctrl+/ ctrl+/",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.startWork",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ w",
				"mac": "ctrl+/ w",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newComment",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ c",
				"mac": "ctrl+/ c",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newComment",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ ctrl+shift+c",
				"mac": "ctrl+/ ctrl+c",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newIssue",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ i",
				"mac": "ctrl+/ i",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newIssue",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ ctrl+shift+i",
				"mac": "ctrl+/ ctrl+i",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newReview",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ r",
				"mac": "ctrl+/ r",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newReview",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ ctrl+shift+r",
				"mac": "ctrl+/ ctrl+r",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newPullRequest",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ m",
				"mac": "ctrl+/ m",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newPullRequest",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ p",
				"mac": "ctrl+/ p",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newPullRequest",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ ctrl+shift+m",
				"mac": "ctrl+/ ctrl+m",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newPullRequest",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ ctrl+shift+p",
				"mac": "ctrl+/ ctrl+p",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.showNextChangedFile",
				"args": {
					"source": "Shortcut"
				},
				"key": "alt+f6",
				"mac": "alt+f6",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.showPreviousChangedFile",
				"args": {
					"source": "Shortcut"
				},
				"key": "alt+shift+f6",
				"mac": "alt+shift+f6",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newPermalink",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ l",
				"mac": "ctrl+/ l",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.newPermalink",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ ctrl+shift+l",
				"mac": "ctrl+/ ctrl+l",
				"when": "codestream:status == signedIn"
			},
			{
				"command": "codestream.copyPermalink",
				"args": {
					"source": "Shortcut"
				},
				"key": "ctrl+shift+/ shift+l",
				"mac": "ctrl+/ shift+l",
				"when": "editorTextFocus && codestream:status == signedIn"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "codestream.goOffline",
					"when": "codestream:status != signedOut"
				},
				{
					"command": "codestream.signIn",
					"when": "codestream:status != signedIn && codestream:status != signingIn"
				},
				{
					"command": "codestream.signOut",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.toggle",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.startWork",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.newComment",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.newIssue",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.newReview",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.showPreviousChangedFile",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.showNextChangedFile",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.newPermalink",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.copyPermalink",
					"when": "codestream:status == signedIn"
				},
				{
					"command": "codestream.newPullRequest",
					"when": "codestream:status == signedIn"
				}
			],
			"editor/context": [
				{
					"command": "codestream.newComment",
					"when": "codestream:status == signedIn",
					"group": "9_zcodestream@1"
				},
				{
					"command": "codestream.newIssue",
					"when": "codestream:status == signedIn && resourceScheme == file",
					"group": "9_zcodestream@2"
				},
				{
					"command": "codestream.newPermalink",
					"when": "codestream:status == signedIn && resourceScheme == file",
					"group": "9_zcodestream@4"
				}
			],
			"view/title": [
				{
					"command": "codestream.scmNewPullRequest",
					"when": "view == scmTreeDataProvider && codestream:status == signedIn",
					"group": "navigation"
				},
				{
					"command": "codestream.scmNewReview",
					"when": "view == scmTreeDataProvider && codestream:status == signedIn",
					"group": "navigation"
				},
				{
					"command": "codestream.scmNewComment",
					"when": "view == scmTreeDataProvider && codestream:status == signedIn",
					"group": "navigation"
				},
				{
					"command": "codestream.scmNewIssue",
					"when": "view == scmTreeDataProvider && codestream:status == signedIn",
					"group": "navigation"
				}
			]
		},
		"resourceLabelFormatters": [
			{
				"scheme": "codestream-git",
				"authority": "*",
				"formatting": {
					"label": "${path} (${query.shortSha})",
					"separator": "/",
					"workspaceSuffix": "CodeStream",
					"stripPathStartingSeparator": true
				}
			}
		]
	},
	"activationEvents": [
		"onStartupFinished"
	],
	"scripts": {
		"agent:build": "pushd \"../shared/agent\" && npm run build -- --ide vscode && popd",
		"agent:bundle:ci": "pushd \"../shared/agent\" && npm run bundle:ci && popd",
		"agent:bundle": "pushd \"../shared/agent\" && npm run bundle && popd",
		"agent:clean:ci": "pushd \"../shared/agent\" && npm run clean:ci && popd",
		"agent:rebuild": "pushd \"../shared/agent\" && npm run rebuild -- --ide vscode && popd",
		"agent:test:ci": "pushd \"../shared/agent\" && npm run test:ci && popd",
		"agent:test": "pushd \"../shared/agent\" && npm run test-unit && popd",
		"agent:watch": "pushd \"../shared/agent\" && npm run watch -- --ide vscode && popd",
		"build": "tsx esbuild.ts",
		"bundle:ci": "npm run clean:ci && npm run bundle",
		"bundle": "npm install --no-save && npm run webview:verify && npm run agent:bundle && tsx esbuild.ts --prod",
		"cistart": "echo 'starting tests'",
		"cistop": "echo 'starting tests'",
		"citest": "npm run agent:test:ci && npm run webview:test:ci",
		"clean:ci": "git clean -xdf && npm run webview:clean:ci && npm run agent:clean:ci",
		"dev:vscode:test": "node ./out/src/__test__/runTest.js",
		"dev:vscode:watch-tests": "tsc -p tsconfig.test.json -w --outDir out",
		"lint": "eslint --fix --ext .ts \"src/{**!(webviews)/*,*}\"",
		"pack": "vsce package",
		"postinstall": "patch-package",
		"preinstall": "pushd \"../shared/ui\" && npm install --no-save && popd && pushd \"../shared/util\" && npm install --no-save && popd",
		"pretty": "prettier  --write \"./src/**/*.ts\" \"./src/**/*.js\" ./package.json ./.prettierrc.js",
		"rebuild": "npm install --no-save && npm run agent:rebuild && npm run build",
		"test": "npm run agent:test && npm run webview:test && npm run vscode:test",
		"vscode:compile-tests": "rimraf out && tsc -p tsconfig.test.json --outDir out && tsc-alias -p tsconfig.test.json",
		"vscode:test": "npm run vscode:compile-tests && node ./out/__test__/runTest.js",
		"verify:compile": "tsc --noEmit",
		"verify:lint": "npx eslint  src/** *.js *.ts",
		"verify:prettier": "prettier --check src/** docs/** *.ts *.js *.md package.json",
		"watch": "tsx esbuild.ts --watch",
		"webview:build": "tsx esbuild.ts --config-name webview",
		"webview:clean:ci": "pushd \"../shared/ui\" && npm run clean:ci && popd",
		"webview:test:ci": "pushd \"../shared/ui\" && npm run test:ci && popd",
		"webview:test": "pushd \"../shared/ui\" && npm run test && popd",
		"webview:verify": "tsx esbuild.ts --only-symlinks && pushd \"../shared/ui\" && npm run verify:compile && popd",
		"webview:watch": "tsx esbuild.ts --watch --config-name webview"
	},
	"dependencies": {
		"core-js": "2.6.9",
		"date-fns": "1.30.1",
		"https-proxy-agent": "3.0.1",
		"lodash": "4.17.21",
		"node-abort-controller": "3.0.1",
		"node-fetch": "2.6.7",
		"source-map-support": "^0.5.21",
		"uuid": "3.3.2",
		"vscode-languageclient": "5.2.1"
	},
	"devDependencies": {
		"@types/diff": "4.0.2",
		"@types/glob": "^7.2.0",
		"@types/keytar": "4.4.2",
		"@types/lodash": "4.14.178",
		"@types/mocha": "9.1.0",
		"@types/node": "16",
		"@types/node-fetch": "2.6.1",
		"@types/sinon": "10.0.11",
		"@types/uuid": "3.4.5",
		"@types/vscode": "1.49.0",
		"@typescript-eslint/eslint-plugin": "5.41.0",
		"@typescript-eslint/parser": "5.41.0",
		"@vscode/test-electron": "2.1.2",
		"babel-plugin-styled-components": "2.0.2",
		"cpy": "9.0.1",
		"esbuild": "0.15.12",
		"eslint": "8.26.0",
		"eslint-filtered-fix": "0.3.0",
		"eslint-import-resolver-typescript": "3.5.2",
		"eslint-plugin-import": "2.26.0",
		"eslint-plugin-unused-imports": "2.0.0",
		"glob": "7.2.0",
		"less": "4.1.2",
		"lint-staged": "13.0.3",
		"mocha": "9.2.1",
		"patch-package": "6.4.7",
		"prettier": "2.7.1",
		"rimraf": "3.0.2",
		"sinon": "14.0.0",
		"tsc-alias": "1.7.0",
		"tsx": "3.9.0",
		"typescript": "4.8.4",
		"vsce": "2.6.7"
	},
	"lint-staged": {
		"*": [
			"prettier --ignore-unknown --write",
			"eslint-filtered-fix --rule 'unused-imports/no-unused-imports' --rule 'unused-imports/no-unused-vars' --rule 'import/order'"
		],
		"src/*.{js,jsx,ts,tsx}": "eslint"
	},
	"__metadata": {
		"id": "a59a33cb-9f43-4f1a-890f-5d400cb82389",
		"publisherId": "4239572b-f334-4e63-9024-819b4e343f42",
		"publisherDisplayName": "New Relic",
		"targetPlatform": "undefined",
		"isApplicationScoped": false,
		"updated": true,
		"isPreReleaseVersion": false,
		"installedTimestamp": 1671552412466,
		"preRelease": false
	}
}